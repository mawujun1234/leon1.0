<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
		default-lazy-init="true">



	
	<!-- 
	<bean class="com.mawujun.repository.mybatis.FileActionListenerContanier" id="fileActionListenerContanier" init-method="afterPropertiesSet" lazy-init="false">
		<property name="enable" value="${mybatis.fileListenerEnable}"/>
	
		<property name="folders">
			<list>
				<value>mapper</value>
			</list>
		</property>
		
		<property name="dymincReloadActions">
			<list>
				<bean class="com.mawujun.repository.mybatis.DymincReloadActionImp">
					<property name="sqlSessionFactoryId" value="sqlSessionFactory"/>
					<property name="reloadSqlFile" value="${mybatis.reloadSqlFile}"/>
					<property name="mapperFileSuffix" value="Mapper.xml"/>
				</bean>
			</list>
		</property>
	 </bean>
	  -->
	<!-- 日志监控
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>
-->
	<!-- 这里也可以引用web.xml中的${spring.profiles.active}，测试成功。
	${profiles.active}是maven默认定义的key值-->
	<context:property-placeholder location="classpath:leon.${spring.profiles.active}.properties,classpath:dialet_config.properties" />  

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"  lazy-init="true">
				<property name="dataSource" ref="dataSource" />
				<property name="configLocation" value="classpath:Configuration.xml" />
				<property name="plugins">
					<list>
						<bean class="com.mawujun.repository.mybatis.OffsetLimitInterceptor">
							<property name="dialect">
								<bean class="${${jdbc.dbName}.mybatis.dialet}"></bean>
							</property>
						</bean>
					</list>
				</property>
				<property name="databaseIdProvider">
					<bean class="com.mawujun.repository.mybatis.DatabaseIdProviderCustom">
						<property name="databaseId" value="${jdbc.dbName}"></property>
					</bean>
				</property>
				<property name="mapperLocations" >
					<list>
						<value >classpath:/**/*_${jdbc.dbName}_Mapper.xml</value>
					</list>
				</property>
	</bean>
	<!-- 对mybatis的文件变动进行监听 -->
	<bean class="com.mawujun.repository.mybatis.FileActionListenerContanier" id="fileActionListenerContanier" init-method="afterPropertiesSet" lazy-init="false">
			<property name="enable" value="${mybatis.file.listener.enable}"/>
		
			<property name="folders">
				<list>
					<value>${jdbc.packagesToScan}</value>
				</list>
			</property>
			
			<property name="dymincReloadActions">
				<list>
					<bean class="com.mawujun.repository.mybatis.DymincReloadActionImp">
						<property name="sqlSessionFactoryId" value="sqlSessionFactory"/>
						<property name="reloadSqlFile" value="${mybatis.reload.mapper.file}"/>
						<property name="mapperFileSuffix" value="${mybatis.reload.mapper.file.suffix}"/>
					</bean>
				</list>
			</property>
	</bean>
		 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" lazy-init="false" >
			<property name="dataSource" ref="dataSource" /> 
			<!-- 
			<property name="namingStrategy">
				<bean class="com.mawujun.repository.hibernate.NamingStrategy"/>
			</property>
			-->
			<property name="hibernateProperties">
				<props>
					<prop key="hibernate.dialect">${${jdbc.dbName}.hibernate.dialet}</prop>
					<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
					<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
					<prop key="use_sql_comments">${use_sql_comments}</prop>
					<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
					<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
					<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
					<prop key="hibernate.archive.autodetection">class</prop>
					<prop key="hibernate.cache.use_second_level_cache">false</prop>  

				</props>
			</property>
			<property name="packagesToScan">
				<list>
			        <value>${jdbc.packagesToScan}</value>
	    		</list>
			</property>
	</bean>
		
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
    <tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="false" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
			
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="defaultAutoCommit" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>
		
	<beans profile="prod">
		<!-- 数据源配置,使用应用内的DBCP数据库连接池 
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"/>
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			
			<property name="maxIdle" value="${dbcp.maxIdle}" />
			<property name="maxActive" value="${dbcp.maxActive}" />
			<property name="defaultAutoCommit" value="false" />
			<property name="timeBetweenEvictionRunsMillis" value="3600000" />
			<property name="minEvictableIdleTimeMillis" value="3600000" />
		</bean>
		-->
	</beans>
	
	<beans profile="dev" >
		<!--
		<jdbc:initialize-database data-source="dataSource" enabled="#{systemProperties.INITIALIZE_DATABASE}"  ignore-failures="DROPS">
		  <jdbc:script location="classpath:sql/initData.sql" encoding="UTF-8" />
		</jdbc:initialize-database>
		 -->
		 <!-- 开发的时候只要初始化过一次就可以了，就不用再进行初始化了,如果是使用h2，那拷贝过去就可以了，不需要再进行初始化，如果是外部数据库，更加不需要重新进行初始化了 -->
		 <jdbc:initialize-database data-source="dataSource" enabled="false" ignore-failures="DROPS">
		 	<jdbc:script location="classpath:sql/initData.sql" encoding="UTF-8" />
		 </jdbc:initialize-database>
	</beans>
	
	<!-- unit test环境 -->
	<beans profile="test">
		 <!-- 只有在测试的时候，才需要每次连接数据库的时候都进行初始化 -->
		<jdbc:embedded-database id="dataSource" type="H2">
			<!--<jdbc:script location="classpath:sql/test.sql" />
			<jdbc:script location="classpath:sql/initData.sql" />-->
		</jdbc:embedded-database>
	</beans>
	

</beans>