<#-- 本文件包含一些公共的函数,本文件会被其它模板自动include -->

<#-- 将value变成jsp el表达式,主要由于FreeMarker生成表达式不方便 -->
<#macro jspEl value>${r"${"}${value}}</#macro>

<#-- 生成java构造函数 -->
<#macro generateConstructor constructor>
	public ${constructor}(){
	}

	public ${constructor}(
	<#list table.compositeIdColumns as column>
		${column.javaType} ${column.columnNameLower}<#if column_has_next>,</#if>
	</#list>		
	){
	<#list table.compositeIdColumns as column>
		<#if column.pk>
		this.${column.columnNameLower} = ${column.columnNameLower};
		</#if>
	</#list>	
	}

</#macro>
<#-- 生成Grid的列 -->
<#macro generateGridColumns editable>
	<#list propertyColumns as propertyColumn>	
      <#if propertyColumn.isBaseType==true ||  propertyColumn.isIdProperty==true>
		<#if propertyColumn.jsType=='date'>
		{dataIndex:'${propertyColumn.property}',text:'${propertyColumn.label!propertyColumn.property}',xtype: 'datecolumn',   format:'Y-m-d'
		<#if editable=="true">
			,renderer: Ext.util.Format.dateRenderer('Y-m-d'),
			,editor: {
                xtype: 'datefield',
                format: 'Y-m-d',
                allowBlank: true
            }
		</#if>
		}<#if propertyColumn_has_next>,</#if>
		<#elseif propertyColumn.jsType=='int' || propertyColumn.jsType=='float'>
		{dataIndex:'${propertyColumn.property}',text:'${propertyColumn.label!propertyColumn.property}',xtype: 'numbercolumn', format:'0.00'
		<#if editable=="true">
			,editor: {
                xtype: 'numberfield',
                selectOnFocus:true,
                allowBlank: true
            }
		</#if>
		}<#if propertyColumn_has_next>,</#if>
		<#else>
		{dataIndex:'${propertyColumn.property}',text:'${propertyColumn.label!propertyColumn.property}'
		<#if editable=="true">
		<#if (propertyColumn.showModel!"")=='checkcolumn'>
			,xtype: 'checkcolumn'
			,stopSelection: false
		<#elseif (propertyColumn.showModel!"")=='combobox'>
			editor: new Ext.form.field.ComboBox({
                typeAhead: true,
                triggerAction: 'all',
                queryMode: 'remote',
		    	displayField: 'name',
		    	valueField: 'key',
                store: Ext.create('Ext.data.Store', {
			    	fields: ['key', 'name'], 
				    proxy:{
				    	type:'ajax',
				    	url:'......',
				    	reader:{
				    		type:'json',
				    		totalProperty:'total',
				    		root:'root'
				    	}
				    }
				})
            })
		<#else>
			,editor: {
	            xtype: 'textfield',
	            selectOnFocus:true
	            allowBlank: true
	        }
		</#if>	
		</#if>
		}<#if propertyColumn_has_next>,</#if>
		</#if>
	  <#elseif propertyColumn.isConstantType==true>
	  {dataIndex:'${propertyColumn.property}',text:'${propertyColumn.label!propertyColumn.property}'
	  <#if editable=="true">
	  	,editor:{
	        xtype:'constantcombo',
            fieldLabel:'${propertyColumn.property}',
            name: '${propertyColumn.property}',
			code:'请补充完整'
        }<#if propertyColumn_has_next>,</#if>
	  </#if>
	  <#else>
		{dataIndex:'${propertyColumn.property}',text:'${propertyColumn.label!propertyColumn.property}'
		<#if editable=="true">
		<#if (propertyColumn.showModel!"")=='checkcolumn'>
			,xtype: 'checkcolumn'
			,stopSelection: false
		<#elseif (propertyColumn.showModel!"")=='combobox'>
			,editor: new Ext.form.field.ComboBox({
                typeAhead: true,
                triggerAction: 'all',
                queryMode: 'remote',
		    	displayField: 'name',
		    	valueField: 'key',
                store: Ext.create('Ext.data.Store', {
			    	fields: ['key', 'name'], 
				    proxy:{
				    	type:'ajax',
				    	url:'......',
				    	reader:{
				    		type:'json',
				    		totalProperty:'total',
				    		root:'root'
				    	}
				    }
				})
            })
		<#else>
			,editor: {
	            xtype: 'textfield',
	            selectOnFocus:true
	            allowBlank: true
	        }
		</#if>
		</#if>
		}<#if propertyColumn_has_next>,</#if>
	  </#if>
	 </#list>   
</#macro>
<#macro generateGridStore userModel extjsClassName>
<#if userModel=="true">
Ext.create('Ext.data.Store',{
	autoSync:false,
    pageSize:50,
    model: '${extjsClassName}',
    autoLoad:false
})
<#else>
Ext.create('Ext.data.Store',{
	autoSync:false,
    pageSize:50,
    autoLoad:false,
    proxy:{
		type: 'ajax',
        url : '/group/queryUser',
        headers:{ 'Accept':'application/json;'},
        actionMethods: { read: 'POST' },
        extraParams:{limit:50},
        reader:{
			type:'json',
			root:'root',
			successProperty:'success',
			totalProperty:'total'		
		}
	}
})
</#if>
</#macro>
<#macro generateGridCreateDelUpd>
[{
  	text: '新增',
	itemId:'create',
	disabled:me.disabledAction,
	handler: function(){
		var me=grid;
    	var modelName=me.model||me.getStore().getProxy( ).getModel().getName( );

		var model=Ext.createModel(modelName,{
		        	//id:''
		});
		model.phantom =true;
		me.getStore().insert(0, model);
		        //me.getStore().add(model);
		var cellediting=me.getPlugin("cellEditingPlugin");
		cellediting.startEditByPosition({
		     row: 0, 
		     column: me.autoNextCellColIdx
		});
	},
	iconCls: 'form-add-button'
},{
	text: '更新',
	itemId:'update',
	disabled:me.disabledAction,
	handler: function(){
		var me=grid;
    	var position=me.getSelectionModel( ).getCurrentPosition( );
		var cellediting=me.getPlugin("cellEditingPlugin");
		cellediting.startEditByPosition(position);
	},
	iconCls: 'form-update-button'
},{
	text: '删除',
	itemId:'destroy',
	disabled:me.disabledAction,
	handler: function(){
		var me=grid;
    	Ext.Msg.confirm("删除",'确定要删除吗?', function(btn, text){
			if (btn == 'yes'){
				var records=me.getSelectionModel( ).getSelection( );//.getLastSelected( );
				me.getStore().remove( records );
				me.getStore().sync({
					failure:function(){
						me.getStore().reload();
					}
				});
			}
		});
	},
	iconCls: 'form-delete-button'
},{
	text: '刷新',
	itemId:'reload',
	disabled:me.disabledAction,
	handler: function(){
		grid.getStore().reload();
	},
	iconCls: 'form-reload-button'
}]
</#macro>
