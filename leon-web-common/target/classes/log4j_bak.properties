### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

### direct messages to file hibernate.log ###
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=hibernate.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

### set log levels - for more verbose logging change 'info' to 'debug' ###

log4j.rootLogger=warn, stdout,file

#hibernate配置
#在所有 SQL DML 语句被执行时为它们记录日志
log4j.logger.org.hibernate.SQL=debug
log4j.logger.org.hibernate.engine.query=debug
#为所有 JDBC 参数记录日志
log4j.logger.org.hibernate.type=debug
#为所有 JDBC 资源的获取记录日志
log4j.logger.org.hibernate.jdbc=debug
#为事务相关的活动记录日志
log4j.logger.org.hibernate.transaction=debug
#为所有二级缓存的活动记录日志
log4j.logger.org.hibernate.cache=debug
#在 session 清洗（flush）时，为所有与其关联的实体（最多 20 个）的状态记录日志
log4j.logger.org.hibernate.pretty=debug
#在所有 SQL DDL 语句执行时为它们记录日志
#trace值也可以
log4j.logger.org.hibernate.tool.hbm2ddl=debug
#为任何 Hibernate 相关信息记录日志（信息量较大，但对查错非常有帮助）
log4j.logger.org.hibernate=debug

### log transaction activity
#log4j.logger.org.hibernate.transaction=debug

### log JDBC resource acquisition
#log4j.logger.org.hibernate.jdbc=debug

### enable the following line if you want to track down connection ###
### leakages when using DriverManagerConnectionProvider ###
#log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=trace



!==============================================================================
! log4j.properties - An example configuration properties file for log4j.
!
! Logging levels are:
! DEBUG < INFO < WARN < ERROR < FATAL
!==============================================================================

! turn on the internal log4j debugging flag so we can see what it is doing
log4j.debug=true

!==============================================================================
! JDBC API layer call logging :
! INFO shows logging, DEBUG also shows where in code the jdbc calls were made,
! setting DEBUG to true might cause minor slow-down in some environments.
! If you experience too much slowness, use INFO instead.

! Log all JDBC calls except for ResultSet calls
log4j.logger.jdbc.audit=INFO,jdbc
log4j.additivity.jdbc.audit=false

! Log only JDBC calls to ResultSet objects
log4j.logger.jdbc.resultset=OFF
log4j.additivity.jdbc.resultset=false

! Log only the SQL that is executed.
log4j.logger.jdbc.sqlonly=DEBUG,sql
log4j.additivity.jdbc.sqlonly=false

! Log timing information about the SQL that is executed.
log4j.logger.jdbc.sqltiming=DEBUG,sqltiming
log4j.additivity.jdbc.sqltiming=false

! Log connection open/close events and connection number dump
log4j.logger.jdbc.connection=FATAL,connection
log4j.additivity.jdbc.connection=false

! the appender used for the JDBC API layer call logging above, sql only
log4j.appender.sql=org.apache.log4j.ConsoleAppender
log4j.appender.sql.layout=org.apache.log4j.PatternLayout
log4j.appender.sql.layout.ConversionPattern=-----> %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n%n


! the appender used for the JDBC API layer call logging above, sql timing
log4j.appender.sqltiming=org.apache.log4j.ConsoleAppender
log4j.appender.sqltiming.layout=org.apache.log4j.PatternLayout
log4j.appender.sqltiming.layout.ConversionPattern=-----> %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n%n

! the appender used for the JDBC API layer call logging above
log4j.appender.jdbc=org.apache.log4j.ConsoleAppender
log4j.appender.jdbc.layout=org.apache.log4j.PatternLayout
log4j.appender.jdbc.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %m%n

! the appender used for the JDBC Connection open and close events
log4j.appender.connection=org.apache.log4j.ConsoleAppender
log4j.appender.connection.layout=org.apache.log4j.PatternLayout
log4j.appender.connection.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %m%n


#! the appender used for the JDBC API layer call logging above, sql only
#log4j.appender.sql=org.apache.log4j.FileAppender
#log4j.appender.sql.File=./logs/sql.log
#log4j.appender.sql.Append=false
#log4j.appender.sql.layout=org.apache.log4j.PatternLayout
#log4j.appender.sql.layout.ConversionPattern=-----> %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n%n
#
#! the appender used for the JDBC API layer call logging above, sql timing
#log4j.appender.sqltiming=org.apache.log4j.FileAppender
#log4j.appender.sqltiming.File=./logs/sqltiming.log
#log4j.appender.sqltiming.Append=false
#log4j.appender.sqltiming.layout=org.apache.log4j.PatternLayout
#log4j.appender.sqltiming.layout.ConversionPattern=-----> %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n%n
#
#! the appender used for the JDBC API layer call logging above
#log4j.appender.jdbc=org.apache.log4j.FileAppender
#log4j.appender.jdbc.File=./logs/jdbc.log
#log4j.appender.jdbc.Append=false
#log4j.appender.jdbc.layout=org.apache.log4j.PatternLayout
#log4j.appender.jdbc.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %m%n
#
#! the appender used for the JDBC Connection open and close events
#log4j.appender.connection=org.apache.log4j.FileAppender
#log4j.appender.connection.File=./logs/connection.log
#log4j.appender.connection.Append=false
#log4j.appender.connection.layout=org.apache.log4j.PatternLayout
#log4j.appender.connection.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %m%n


#mybatis logger config 
log4j.logger.com.ibatis=info
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=info 
log4j.logger.org.apache.ibatis.jdbc.ScriptRunner=info 
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=info 
log4j.logger.java.sql.Connection=DEBUG 
log4j.logger.java.sql.Statement=DEBUG 
log4j.logger.java.sql.PreparedStatement=DEBUG


